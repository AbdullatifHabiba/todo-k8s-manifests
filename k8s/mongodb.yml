apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: todo-app
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: password
        - name: MONGO_INITDB_DATABASE
          value: "todolist"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongo-init
          mountPath: /docker-entrypoint-initdb.d/mongo-init.js
          subPath: mongo-init.js
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongo-init
        configMap:
          name: mongo-init-script
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: todo-app
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-script
  namespace: todo-app
data:
  mongo-init.js: |
    // Switch to the todolist database
    db = db.getSiblingDB('todolist');

    // Use environment variables or hardcoded values
    const appUser = 'app_user';
    const appPassword = 'app_password';

    // Create application user with readWrite permissions
    db.createUser({
      user: appUser,
      pwd: appPassword,
      roles: [
        {
          role: 'readWrite',
          db: 'todolist'
        }
      ]
    });

    print('Created user: ' + appUser + ' for database: todolist');